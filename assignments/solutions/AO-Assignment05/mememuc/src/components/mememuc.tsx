import React from 'react';
import './mememuc.css';
import OmmMemeMUCHistory from "./mememuc-history";

const MEME_API_BASE_URL = 'http://mememuc.medien.ifi.lmu.de:3000';

interface Meme {
  name: string;
  link: string;
}

interface Caption {
  topText: string
  topX: number
  topY: number
  bottomText: string
  bottomX: number
  bottomY: number
}

// CustomizedMeme represents a meme with added caption. Can be useful 
// to save memes into the history.
export interface CustomizedMeme {
  baseMeme: Meme    // the base meme object
  caption: Caption  // the caption object (see
  link: URL         // the built url, which is generated by the memeUrl getter when the above baseMeme and caption would be given
}

const OmmMemeMUC: React.FC = () => {
  const [selectState, setSelectState] = React.useState<Meme>();
  const [memeState, setMemeState] = React.useState<Meme[]>([
      {
        name: 'doge',
        link: `${MEME_API_BASE_URL}/memes/doge`,
      },
  ]);
  const [captionState, setCaptionState] = React.useState<Caption>({
    topText: '', topX: 0, topY: 0,
    bottomText: '', bottomX: 0, bottomY: 0,
  });
  const getMemes = () => {
    fetch(`${MEME_API_BASE_URL}/memes`)
    .then(res => res.json())
    .then((memes: Meme[]) => {
      setMemeState(memes.map(meme => {
        meme.link = `${MEME_API_BASE_URL}${meme.link}`;
        return meme
      }))
    })
  };

  const memeURL = () => {
    var meme: Meme = selectState!;
    if (!meme) {
      return null
    }
    const url = new URL(meme!.link);
    url.searchParams.append('text', captionState.topText);
    url.searchParams.append('x', captionState.topX.toString());
    url.searchParams.append('y', captionState.topY.toString());
    url.searchParams.append('text2', captionState.bottomText);
    url.searchParams.append('x2', captionState.bottomX.toString());
    url.searchParams.append('y2', captionState.bottomY.toString());
    return url
  };

  const captionChanged = (e: any) => {
    setCaptionState({
      ...captionState,
      [e.target.name]: e.target.value,
    })
  };

  // TODO: this should store all saved memes
  const [savedMemes, setSavedMemes] = React.useState<CustomizedMeme[]>([]);

  const saveHistoryChanged = () => {
    if(selectState &&  captionState && url) {
      const customizedMeme: CustomizedMeme = {
        baseMeme: selectState,
        caption: captionState,
        link: url
      };
      setSavedMemes(savedMemes.concat(customizedMeme));
    }
  };

  React.useEffect(() => {getMemes()});

  let results = (<h3>No Meme Selected</h3>);
  let url = memeURL();
  if (url) {
    results = (<img src={url.toString()} alt="selected"/>)
  }

  return (<div className="mememuc">
    <ul className="meme-list">{
        memeState.map((meme) => {
          return (<li key={meme.link} onClick={() => {setSelectState(meme)}}>
            <img src={meme.link} alt="lists"/>
          </li>)
        })
    }</ul>
    <div className="results">
      {results}
    </div>
    <div className="params">
      <div className="texts">
        <input name="topText" value={captionState.topText} onChange={captionChanged} type="text" placeholder="Upper Text"/>
        <input name="bottomText" value={captionState.bottomText} onChange={captionChanged} type="text" placeholder="Lower Text"/>
      </div>
      <div className="positions">
        <input name="topX" value={captionState.topX} onChange={captionChanged} type="number"/>
        <input name="topY" value={captionState.topY} onChange={captionChanged} type="number"/>
        <input name="bottomX" value={captionState.bottomX} onChange={captionChanged} type="number"/>
        <input name="bottomY" value={captionState.bottomY} onChange={captionChanged} type="number"/>
      </div>
      {/* TODO: If one clicks this button, the current meme should be saved to the history. Implement the event handling for this button */}
      <input onClick={saveHistoryChanged} type="button" value="Save to favorites" className="save-fav" />
    </div>
    {/* TODO: use the MemeMUCHistory component here */}
    <OmmMemeMUCHistory
        savedMemes={savedMemes}
        setSelectMemeCallback={(customMeme) => {
          setSelectState(customMeme.baseMeme);
          setCaptionState(customMeme.caption);
        }}
        removeMemeCallback={(key) => {
          setSavedMemes(savedMemes.filter((custom, itemKey) => itemKey != key));
        }}
    />
  </div>);
};

export default OmmMemeMUC;